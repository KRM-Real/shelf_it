rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // User profile documents - users can only access their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Validate user data structure
      allow create: if request.auth != null 
        && request.auth.uid == userId
        && validateUserData(request.resource.data);
      
      allow update: if request.auth != null 
        && request.auth.uid == userId
        && validateUserData(request.resource.data)
        && !('uid' in request.resource.data.diff(resource.data).affectedKeys());
    }
    
    // Product documents - access based on user mode and ownership
    match /Product/{productId} {
      allow read: if request.auth != null && (
        // Personal mode: user can only see their own products
        (resource.data.userId == request.auth.uid) ||
        // Organization mode: users can see products from their company
        (getUserMode() == 'organization' && 
         resource.data.company_name == getUserCompany())
      );
      
      allow create: if request.auth != null 
        && validateProductData(request.resource.data)
        && (
          // Personal mode: set userId to current user
          (request.resource.data.userId == request.auth.uid && 
           !('company_name' in request.resource.data)) ||
          // Organization mode: set company_name to user's company
          (request.resource.data.company_name == getUserCompany() &&
           getUserMode() == 'organization')
        );
      
      allow update: if request.auth != null 
        && validateProductData(request.resource.data)
        && (
          // Personal mode: user owns the product
          resource.data.userId == request.auth.uid ||
          // Organization mode: same company
          (resource.data.company_name == getUserCompany() &&
           getUserMode() == 'organization')
        )
        // Prevent changing ownership fields
        && !('userId' in request.resource.data.diff(resource.data).affectedKeys())
        && !('company_name' in request.resource.data.diff(resource.data).affectedKeys());
      
      allow delete: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        (resource.data.company_name == getUserCompany() &&
         getUserMode() == 'organization')
      );
    }
    
    // Transaction documents - similar access patterns as products
    match /transactions/{transactionId} {
      allow read: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      
      allow create: if request.auth != null 
        && request.resource.data.userId == request.auth.uid
        && validateTransactionData(request.resource.data);
      
      // Transactions should be immutable after creation (audit trail)
      allow update: if false;
      allow delete: if false;
    }
    
    // Security audit logs - only system can write, admins can read
    match /security_audit/{auditId} {
      allow read: if request.auth != null && isAdmin();
      allow write: if false; // Only server-side writes
    }
    
    // Helper functions
    function getUserMode() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.mode;
    }
    
    function getUserCompany() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.company_name;
    }
    
    function isAdmin() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function validateUserData(data) {
      return data.keys().hasAll(['email', 'mode', 'created_at']) &&
        data.email is string &&
        data.email.size() > 0 &&
        data.mode in ['personal', 'organization'] &&
        (data.mode == 'personal' || 'company_name' in data) &&
        data.created_at is timestamp;
    }
    
    function validateProductData(data) {
      return data.keys().hasAll(['name', 'quantity', 'price', 'addedAt']) &&
        data.name is string &&
        data.name.size() > 0 &&
        data.name.size() <= 100 &&
        data.quantity is int &&
        data.quantity >= 0 &&
        data.quantity <= 1000000 &&
        data.price is number &&
        data.price >= 0 &&
        data.price <= 1000000 &&
        data.addedAt is timestamp &&
        (!('threshold' in data) || (data.threshold is int && data.threshold >= 0)) &&
        (!('description' in data) || (data.description is string && data.description.size() <= 500)) &&
        (!('barcode' in data) || (data.barcode is string && data.barcode.size() <= 50));
    }
    
    function validateTransactionData(data) {
      return data.keys().hasAll(['action', 'product', 'quantity', 'userId', 'timestamp']) &&
        data.action in ['Restock', 'Sold', 'Adjustment'] &&
        data.product is string &&
        data.product.size() > 0 &&
        data.quantity is int &&
        data.quantity > 0 &&
        data.userId is string &&
        data.timestamp is timestamp;
    }
  }
}
